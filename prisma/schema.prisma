// --- Generator & Datasource ---
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- ENUMS ---
enum Role {
  ADMIN
  OWNER
  CUSTOMER
}

enum PropertyType {
  VILLA
  HOUSE
  APARTMENT
}

// --- USER MODEL ---
model User {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  password    String
  phone       String
  role        Role       @default(CUSTOMER)
  avatarUrl   String?
  properties  Property[] @relation("UserProperties")
  reviews     Review[]
  bookings    Booking[]
  wishlists   Wishlist[]
  favorites   Favorite[]
  notifications Notification[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// --- PROPERTY (Generic) ---
model Property {
  id          String          @id @default(uuid())
  title       String
  description String
  location    String
  price       Int
  type        PropertyType
  ownerId     String
  owner       User            @relation("UserProperties", fields: [ownerId], references: [id])
  villa       Villa?          @relation("PropertyVilla")
  images      PropertyImage[]
  reviews     Review[]
  bookings    Booking[]
  facilities  Facility[]      @relation("PropertyFacilities")
  wishlists   Wishlist[]
  favorites   Favorite[]
  messages    Message[]
  availabilities Availability[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

// --- VILLA (Specific Type) ---
model Villa {
  id              String   @id
  bedrooms        Int
  bathrooms       Int
  hasSwimmingPool Boolean
  property        Property @relation("PropertyVilla", fields: [id], references: [id], onDelete: Cascade)
}

// --- PROPERTY IMAGE (Multiple per property) ---
model PropertyImage {
  id         String   @id @default(uuid())
  url        String
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

// --- REVIEW (User reviews for properties) ---
model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String
  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

// --- BOOKING (User bookings for properties) ---
model Booking {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  startDate  DateTime
  endDate    DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  payment    Payment?
  createdAt  DateTime @default(now())
}

// --- FACILITY (Facilities for properties) ---
model Facility {
  id         String     @id @default(uuid())
  name       String
  properties Property[] @relation("PropertyFacilities")
}

// --- FAVORITE (Properti yang disukai user, sekadar penanda) ---
model Favorite {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

// --- WISHLIST (Properti yang ingin dibooking user, niat booking di masa depan) ---
model Wishlist {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

// --- PAYMENT (Pembayaran booking) ---
model Payment {
  id         String   @id @default(uuid())
  bookingId  String   @unique
  amount     Int
  status     PaymentStatus @default(PENDING)
  method     String
  paidAt     DateTime?
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

// --- NOTIFICATION (Notifikasi untuk user) ---
model Notification {
  id         String   @id @default(uuid())
  userId     String
  content    String
  read       Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

// --- MESSAGE (Chat antara user dan owner) ---
model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  propertyId String?
  createdAt  DateTime @default(now())

  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  property   Property? @relation(fields: [propertyId], references: [id])
}

// --- AVAILABILITY (Ketersediaan properti) ---
model Availability {
  id         String   @id @default(uuid())
  propertyId String
  startDate  DateTime
  endDate    DateTime
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}
